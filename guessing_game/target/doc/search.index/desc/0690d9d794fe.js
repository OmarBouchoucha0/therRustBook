rd_("BhThe type sampled by this implementation.BhA type alias for <code>BigEndian</code>.BkA type alias for <code>LittleEndian</code>.AgLittle-Endian utilitiesCnAVX but not AVX2: only 128-bit integer operations, but use \xe2\x80\xa6ClA 32-bit floating point number stored in big-endian byte \xe2\x80\xa6CjA 32-bit floating point number stored in little-endian \xe2\x80\xa6CkA 32-bit floating point number stored in network-endian \xe2\x80\xa6CjA 32-bit floating point number stored in native-endian \xe2\x80\xa6CiA 32-bit floating point number stored in a given byte \xe2\x80\xa6ClA 64-bit floating point number stored in big-endian byte \xe2\x80\xa6CjA 64-bit floating point number stored in little-endian \xe2\x80\xa6CkA 64-bit floating point number stored in network-endian \xe2\x80\xa6CjA 64-bit floating point number stored in native-endian \xe2\x80\xa6CiA 64-bit floating point number stored in a given byte \xe2\x80\xa6ChA 16-bit signed integer stored in big-endian byte order.CkA 16-bit signed integer stored in little-endian byte order.CiA 16-bit signed integer stored in network-endian byte \xe2\x80\xa6CkA 16-bit signed integer stored in native-endian byte order.CeA 16-bit signed integer stored in a given byte order.ChA 32-bit signed integer stored in big-endian byte order.CkA 32-bit signed integer stored in little-endian byte order.CiA 32-bit signed integer stored in network-endian byte \xe2\x80\xa6CkA 32-bit signed integer stored in native-endian byte order.CeA 32-bit signed integer stored in a given byte order.ChA 64-bit signed integer stored in big-endian byte order.CkA 64-bit signed integer stored in little-endian byte order.CiA 64-bit signed integer stored in network-endian byte \xe2\x80\xa6CkA 64-bit signed integer stored in native-endian byte order.CeA 64-bit signed integer stored in a given byte order.BlA typed reference derived from a byte slice.DhAn automatically-implemented extension trait on <code>RngCore</code> \xe2\x80\xa6CjA 16-bit unsigned integer stored in big-endian byte order.CjA 16-bit unsigned integer stored in little-endian byte \xe2\x80\xa6CkA 16-bit unsigned integer stored in network-endian byte \xe2\x80\xa6CjA 16-bit unsigned integer stored in native-endian byte \xe2\x80\xa6CgA 16-bit unsigned integer stored in a given byte order.CjA 32-bit unsigned integer stored in big-endian byte order.CjA 32-bit unsigned integer stored in little-endian byte \xe2\x80\xa6CkA 32-bit unsigned integer stored in network-endian byte \xe2\x80\xa6CjA 32-bit unsigned integer stored in native-endian byte \xe2\x80\xa6CgA 32-bit unsigned integer stored in a given byte order.CjA 64-bit unsigned integer stored in big-endian byte order.CjA 64-bit unsigned integer stored in little-endian byte \xe2\x80\xa6CkA 64-bit unsigned integer stored in network-endian byte \xe2\x80\xa6CjA 64-bit unsigned integer stored in native-endian byte \xe2\x80\xa6CgA 64-bit unsigned integer stored in a given byte order.C`Build an ioctl number for an argumentless ioctl.DhReturn a random value supporting the <code>Standard</code> distribution.0BhGets a copy of the inner <code>T</code>.CnReturns the value as a primitive type, possibly performing \xe2\x80\xa600000000000AmReturns the number of indicesCmCreate a distribution of values of \xe2\x80\x98S\xe2\x80\x99 by mapping the \xe2\x80\xa60DaConstruct from any type supporting <code>std::error::Error</code>DhConstruct a new <code>Bernoulli</code> with the given probability of \xe2\x80\xa6DiCreate a new <code>Slice</code> instance which samples uniformly from \xe2\x80\xa6EeCreates a new a <code>WeightedIndex</code> <code>Distribution</code> using the valuesClConstruct self, with inclusive lower bound and exclusive \xe2\x80\xa6DkCreate a new <code>Uniform</code> instance which samples uniformly from \xe2\x80\xa6DkCreate a <code>StepRng</code>, yielding an arithmetic sequence starting \xe2\x80\xa6CkCreate a new <code>ReadRng</code> from a <code>Read</code>.DjCreate a new <code>ReseedingRng</code> from an existing PRNG, combined \xe2\x80\xa68DhCreate a new <code>BlockRng</code> from an existing RNG implementing \xe2\x80\xa60BfConstructs a new <code>Unalign</code>.CmConstructs a new value, possibly performing an endianness \xe2\x80\xa600000000000AnSequence-related functionalityCkSets the inner <code>T</code>, dropping the previous value.ClUpdates the value in place as a primitive type, possibly \xe2\x80\xa600000000000BgThe element type of the trailing slice.BjTypes which may be filled with random dataCiA 128-bit signed integer stored in big-endian byte order.CiA 128-bit signed integer stored in little-endian byte \xe2\x80\xa6CjA 128-bit signed integer stored in network-endian byte \xe2\x80\xa6CiA 128-bit signed integer stored in native-endian byte \xe2\x80\xa6CfA 128-bit signed integer stored in a given byte order.AaThe element type.BlResults element type, e.g. <code>u32</code>.BkSeed type, which is restricted to types \xe2\x80\xa60BlThe conversion source was of incorrect size.0000CkA 128-bit unsigned integer stored in big-endian byte order.CkA 128-bit unsigned integer stored in little-endian byte \xe2\x80\xa6ClA 128-bit unsigned integer stored in network-endian byte \xe2\x80\xa6CkA 128-bit unsigned integer stored in native-endian byte \xe2\x80\xa6ChA 128-bit unsigned integer stored in a given byte order.C`Combine single vectors into a multi-lane vector.ClA vector composed of two elements, which may be words or \xe2\x80\xa6CmA vector composed of four elements, which may be words or \xe2\x80\xa6oThe value zero.00000000000BmBuild an ioctl number for an read-only ioctl.BnBuild an ioctl number for an write-only ioctl.AlExtract the bare error code.B`Retrieve the error code, if any.0DmThe <em>core</em> part of the RNG, implementing the <code>generate</code> \xe2\x80\xa60CmFill any type implementing <code>Fill</code> with random data0AoReturns the argument unchanged.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CeInfallibly discards the alignment error from this \xe2\x80\xa6111EcInfallibly extracts the <code>SizeError</code> from this <code>CastError</code> \xe2\x80\xa622BaCalls <code>U::from(self)</code>.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000DcIterate over the indices as a sequence of <code>usize</code> valuesChlibc - Raw FFI bindings to platforms\xe2\x80\x99 system librariesAlMock random number generatorBfUtilities for random number generationAoReads a copy of <code>T</code>.BeRandom number generators and adaptersBhOverwrites <code>self</code> with zeros.CeA small and <code>no_std</code> compatible error typeBfError type of random number generators0CiA word-sized signed integer stored in a given byte order.ClA random number generator that retrieves randomness from \xe2\x80\xa60CfA distribution to sample items uniformly from a slice.DfA <code>T</code> that has been split into two possibly-overlapping \xe2\x80\xa6CkA word-sized unsigned integer stored in a given byte order.BmBuild an ioctl number for a read-write ioctl.CnThe <code>BlockRngCore</code> trait and implementation helpersAjGets the underlying bytes.BaTypes related to error reporting.DaHelper functions for implementing <code>RngCore</code> functions.BbLow-level API for sampling indicesCaReturn the value at the given <code>index</code>.BeGet the index into the result buffer.0CaReference the inner error (<code>std</code> only)0ClReset the number of available results. This will force a \xe2\x80\xa60DcWrites the bytes of <code>t</code> and then forgets <code>t</code>.CaThe provided weight collection contains no items.CmA distribution to sample floating point numbers uniformly \xe2\x80\xa6DiThe standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen \xe2\x80\xa6ChExchange neigboring ranges of bits of the specified sizeCmA vector composed of four words; depending on their size, \xe2\x80\xa6DfImmutably borrows from an owned value. See <code>Borrow::borrow</code>DbEquivalent to C\xe2\x80\x99s <code>void</code> type when used as a pointer.ClA macro for defining <code>#[cfg]</code> if-else statements.CdThe main macro provided by this crate. See crate \xe2\x80\xa6CnReturns a reference to one random element of the slice, or \xe2\x80\xa6BoChoose one element at random from the iterator.ClStructure used in SIOCGIFCONF request.  Used to retrieve \xe2\x80\xa6CjGenerates a random value using the thread-local random \xe2\x80\xa6AiReseed the internal PRNG.CaSample a new value, using the given distribution.0EfGenerate a random value of <code>T</code>, using <code>rng</code> as the source of \xe2\x80\xa6oSample a value.DeRandomly sample exactly <code>amount</code> distinct indices from \xe2\x80\xa6fSafetyCmUpdates the inner <code>T</code> by calling a function on it.C`Ops that are independent of word size and endianDdA distribution of values of type <code>S</code> derived from the \xe2\x80\xa6AdI am an IDLE thread.AdI\xe2\x80\x99m a virtual CPU.CiAn RNG that reads random bytes straight from any type \xe2\x80\xa6CmResults type. This is the \xe2\x80\x98block\xe2\x80\x99 an RNG implementing \xe2\x80\xa6BfThe core of a random number generator.0DnThe <code>UniformSampler</code> implementation supporting type <code>X</code>.AoTypes that can be split in two.DeA simple implementation of <code>RngCore</code> for testing purposes.DkToo many weights are provided (length greater than <code>u32::MAX</code>\xe2\x80\xa6BeA type with no alignment requirement.BkSample values uniformly between two bounds.0CkVec4 functions which may not be implemented yet for all \xe2\x80\xa6B`Wrappers / adapters forming RNGsCjGets an unaligned raw pointer to the inner <code>T</code>.nSize of bufferCkMaps the source value associated with the conversion error.00000000BgConvenience re-export of common membersBaShuffle a mutable slice in place.ClA distribution uniformly sampling numbers within a given \xe2\x80\xa6AlOps that depend on word sizeDbA wrapper type implementing <code>RngCore</code> for some type \xe2\x80\xa6DcAn iterator that generates random values of <code>T</code> with \xe2\x80\xa6AdA vector of indices.CmA generic random value distribution, implemented for many \xe2\x80\xa6BmThe conversion source contained invalid data.0000AmGets the bytes of this value.CnGenerate the full set of optimized implementations to take \xe2\x80\xa6CgCreate a new PRNG seeded from another <code>Rng</code>.0CnReturn a bool with a probability <code>p</code> of being true.0B`Generate a new block of results.mGet the seed.00Aninterface name, e.g. \xe2\x80\x9cen0\xe2\x80\x9dfSafetyChConverts this <code>Ref</code> into a mutable reference.C`Converts this <code>Ref</code> into a reference.CeProduces the source underlying the failed conversion.00000000DoReturn result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not \xe2\x80\xa6BaCheck whether the range is empty.BmReturns <code>true</code> if the length is 0.BhReturn the next random <code>u32</code>.0BhReturn the next random <code>u64</code>.0BkAttempts to split <code>self</code> in two.0CdAttempts to split <code>self</code> at the midpoint.DhExtracts the bytes of <code>self</code> without swapping the byte order.00000000000CcSplit a multi-lane vector into single-lane vectors.AjFill self with random dataCmFill any type implementing <code>Fill</code> with random data0AgWeighted index samplingCgWrites a copy of <code>self</code> to <code>dst</code>.Cn<em><strong>Fast, safe, compile error. Pick two.</strong></em>BmThe conversion source was improperly aligned.0000AkThe Bernoulli distribution.AfBig-endian byte order.BjA type-level representation of byte order.CaA mutable or immutable reference to a byte slice.BhThe error type of reference conversions.AeChaCha with 20 roundsDcA marker trait used to indicate that an <code>RngCore</code> or \xe2\x80\xa60BiTypes for which any bit pattern is valid.DgTypes for which a sequence of <code>0</code> bytes is a valid instance.BnTypes which are free from interior mutability.ChTypes that can be converted to an immutable slice of \xe2\x80\xa6AbThe maximum value.0000BlA vector composed of multiple 128-bit lanes.BnRDRAND instruction unsupported on this target.AiI am <code>kswapd</code>.Ao<code>ReadRng</code> error typeCnThe error emitted if the conversion source is of incorrect \xe2\x80\xa6BiA reference to the thread-local generatorBdTypes with no alignment requirement.FbWARNING: The <code>PartialEq</code>, <code>Eq</code> and <code>Hash</code> implementations of thisBdByte order-aware numeric primitives.BbGets the underlying bytes mutably.BgCreate a new PRNG using the given seed.0BkGenerate a random value in the given range.0DjReturn a bool with a probability of <code>numerator/denominator</code> \xe2\x80\xa60CgInterface to the operating system\xe2\x80\x99s random number \xe2\x80\xa6DjFill <code>dest</code> with random bytes from the system\xe2\x80\x99s preferred \xe2\x80\xa6CnConvert into an iterator over the indices as a sequence of \xe2\x80\xa6AoRandom number generation traitsCnThe 64-bit libc on Solaris and illumos only has readdir_r. \xe2\x80\xa6CgSafely transmutes a value of one type to a value of \xe2\x80\xa6DiAttempts to return a reference to the wrapped <code>T</code>, failing \xe2\x80\xa6BfThe error type of a failed allocation.DbA wrapper type implementing <code>RngCore</code> for some type \xe2\x80\xa6CkA cryptographically secure random number generator that \xe2\x80\xa6BjChaCha with 20 rounds, low-level interfaceAk<code>String</code> sampleroIP6 Auth HeaderAitp-4 w/ class negotiationCmA vector composed one or more lanes each composed of four \xe2\x80\xa6AbGetting shut down.AeI am a kernel thread.ChEncountered an unexpected situation which should not \xe2\x80\xa6DhThe back-end implementing <code>UniformSampler</code> for integer types.CdThe environment does not support the Web Crypto API.BoUpcast to an <code>RngCore</code> trait object.CcNumeric primitives stored in big-endian byte order.CfTraits for types that encapsulate a <code>[u8]</code>.ClReturns a mutable reference to one random element of the \xe2\x80\xa6BhFill <code>dest</code> with random data.0C`Constructs a <code>Ref</code> from a byte slice.DiConstructs a new value from bytes which are already in <code>O</code> \xe2\x80\xa600000000000C`Build a multi-lane vector from individual lanes.DjConstruct a new <code>Bernoulli</code> with the probability of success \xe2\x80\xa6AfGet the stream number.00CoConsumes <code>self</code>, returning the inner <code>T</code>.CkCreates an instance of <code>Self</code> from zeroed bytes.AfSet the stream number.00BnUnwrap the inner error (<code>std</code> only)0CnRetrieve the lazily-initialized thread-local random number \xe2\x80\xa6CkA cryptographically secure random number generator that \xe2\x80\xa60AdChaCha with 8 roundsAiexterior gateway protocolAfIP6 Encap Sec. PayloadAfGeneral Routing Encap.gxns idpAiProtocol indep. multicastcpupmraw IP packetClIndicates that zerocopy can reason about certain aspects \xe2\x80\xa6CnNode.js does not have the <code>crypto</code> CommonJS module.B`Plug has ts that needs updating.lDumped core.BaAllocating memory to free memory.BaThis thread should not be frozen.AcKilled by a signal.CkRange that supports generating a single sample efficiently.ChA random number generator that can be explicitly seeded.0ClExtension trait on slices, providing random mutation and \xe2\x80\xa6D`This target/platform is not supported by <code>getrandom</code>.DlThe back-end implementing <code>UniformSampler</code> for <code>char</code>.CnConstructs a <code>Ref</code> from the prefix of a byte slice.CnConstructs a <code>Ref</code> from the suffix of a byte slice.DbGets an unaligned mutable raw pointer to the inner <code>T</code>.BcThe ChaCha random number generator.ClCreate an iterator that generates values using the given \xe2\x80\xa60DfCreate an iterator that generates random values of <code>T</code>, \xe2\x80\xa60DjSample a <code>u8</code>, uniformly distributed over ASCII letters and \xe2\x80\xa6CiA trait for RNGs which do not generate random numbers \xe2\x80\xa6BdA mutable reference to a byte slice.ChCodes at or above this point can be used by users to \xe2\x80\xa600AeChaCha with 12 roundsAeChaCha with 20 roundsB`Zerocopy\xe2\x80\x99s generic error type.CmTypes (distributions) that can be used to create a random \xe2\x80\xa6AiIP Payload Comp. ProtocoldDCCPAcgroup mgmt protocolAafor compatibilityAbIP6 no next headerAdresource reservationdSCTPBkReturn type of <code>IndexVec::iter</code>.AiLittle-endian byte order.BeThe endianness used by this platform.CmA distribution to sample floating point numbers uniformly \xe2\x80\xa6AeTask is an IO worker.BbEarly kill for mce process policy.B`Randomize virtual address space.AkUsed super-user privileges.C`If unset the fpu must be initialized before use.AiI\xe2\x80\x99m a workqueue worker.DhA wrapper around any PRNG that implements <code>BlockRngCore</code>, \xe2\x80\xa6DhHelper trait similar to <code>Borrow</code> but implemented only for \xe2\x80\xa6CaThe error type of fallible reference conversions.BlTypes for which some bit patterns are valid.BlThe error type of fallible read-conversions.CmThe back-end implementing <code>UniformSampler</code> for \xe2\x80\xa6BeGets the bytes of this value mutably.DdCreates a new instance of the RNG seeded via <code>getrandom</code>.0CjGet the offset from the start of the stream, in 32-bit \xe2\x80\xa600DjGNU version of <code>basename(3)</code>, defined in <code>string.h</code>.CnExtract the raw OS error code (if this error came from the \xe2\x80\xa600CjSet the offset from the start of the stream, in 32-bit \xe2\x80\xa600BkAttempts to split <code>self</code> in two.0ClAn extension trait that is automatically implemented for \xe2\x80\xa6CbRDRAND instruction failed due to a hardware issue.Adencapsulation headermMultipath TCPDeA <code>ByteSlice</code> that conveys no ownership, and so can be \xe2\x80\xa6CgA weight is either less than zero, greater than the \xe2\x80\xa6BnThe endianness used in many network protocols.AiForked but didn\xe2\x80\x99t exec.CgHelper trait for creating objects using the correct \xe2\x80\xa6CgThe error emitted if the conversion source contains \xe2\x80\xa6CiError type returned from <code>WeightedIndex::new</code>.ChA distribution using weighted sampling of discrete itemsCkAppend <code>len</code> random chars to <code>string</code>BoChoose one element at random from the iterator.ChGenerating random samples from probability distributionsCmIncludes a file and safely transmutes it to a value of an \xe2\x80\xa6CfNumeric primitives stored in little-endian byte order.CfNumeric primitives stored in native-endian byte order.CoConstruct self, with inclusive bounds <code>[low, high]</code>.DkCreate a new <code>Uniform</code> instance which samples uniformly from \xe2\x80\xa6DkReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.DkReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.BgGenerate a sample from the given range.CeSample a single value uniformly from a range with \xe2\x80\xa6CoGenerate a <code>String</code> of <code>len</code> random chars0C`Create a new PRNG using a <code>u64</code> seed.0CjSafely transmutes a mutable reference of one type to a \xe2\x80\xa6CmSafely transmutes a mutable or immutable reference of one \xe2\x80\xa6DiAttempts to return a mutable reference to the wrapped <code>T</code>, \xe2\x80\xa6CnConditionally transmutes a value of one type to a value of \xe2\x80\xa6EbProduces the split parts of <code>self</code>, using <code>Immutable</code> to \xe2\x80\xa6EbProduces the split parts of <code>self</code>, using <code>Unaligned</code> to \xe2\x80\xa60CgUnsafely produces the split parts of <code>self</code>.0ClThe error emitted if the conversion source is improperly \xe2\x80\xa6CeAll items in the provided weight collection are zero.CeError type returned from <code>Bernoulli::new</code>.CmCodes below this point represent OS Errors (i.e. positive \xe2\x80\xa600DfCall to <code>CCRandomGenerateBytes</code> failed on iOS, tvOS, or \xe2\x80\xa6CkExtension trait on iterators, providing random sampling \xe2\x80\xa6CmCalled from an ES module on Node.js. This is unsupported, \xe2\x80\xa6AmProcess policy on mce errors.BkKernel thread cloned from userspace thread.CbA <code>ByteSlice</code> that can be split in two.BnHelper trait handling actual uniform sampling.DiInterprets the given <code>source</code> as a <code>&amp;mut Self</code>.CgNumeric primitives stored in network-endian byte order.DlPOSIX version of <code>basename(3)</code>, defined in <code>libgen.h</code>.DeInterprets the given <code>source</code> as a <code>&amp;Self</code>.CaFill <code>dest</code> entirely with random data.0fSafety0CnUpdate a subset of weights, without changing the number of \xe2\x80\xa6CmGeneric wrapper for unparameterized storage of any of the \xe2\x80\xa6EbProduces the split parts of <code>self</code>, using <code>IntoBytes</code> to \xe2\x80\xa60AfIP6 destination optionAhHop-by-hop option headerAbIP6 routing headerCjAllocations constrained to zones which allow long term \xe2\x80\xa6BbCoredumps should ignore this task.DhThis thread called <code>freeze_processes()</code> and should not be \xe2\x80\xa6CnThe type of metadata stored in a pointer to <code>Self</code>.BiAn iterator over multiple slice elements.E`The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.DjChooses <code>amount</code> elements from the slice at random, without \xe2\x80\xa6DjCollects <code>amount</code> values at random from the iterator into a \xe2\x80\xa6DdSimilar to <code>choose</code>, but where the likelihood of each \xe2\x80\xa6DfReturns a reference to the wrapped <code>T</code> without checking \xe2\x80\xa6ChCoverts <code>self</code> into a <code>&amp;[u8]</code>.EjInterprets the prefix of the given <code>source</code> as a <code>&amp;mut Self</code> \xe2\x80\xa6EjInterprets the suffix of the given <code>source</code> as a <code>&amp;mut Self</code> \xe2\x80\xa6BiShuffle a slice in place, but exit early.DeReads a copy of <code>Self</code> from the given <code>source</code>.EfInterprets the prefix of the given <code>source</code> as a <code>&amp;Self</code> \xe2\x80\xa6DeInterprets the suffix of the given bytes as a <code>&amp;Self</code>.DeRandomly sample exactly <code>amount</code> distinct indices from \xe2\x80\xa6DeWrites a copy of <code>self</code> to the prefix of <code>dst</code>.DeWrites a copy of <code>self</code> to the suffix of <code>dst</code>.BcEthernet-within-IPv6 encapsulation.AhIP6 fragmentation headerC`Return type of <code>IndexVec::into_iter</code>.DhA <code>ByteSliceMut</code> that conveys no ownership, and so can be \xe2\x80\xa6BnAll allocations inherit <code>GFP_NOFS</code>.BnAll allocations inherit <code>GFP_NOIO</code>.CjGenerate a new set of results immediately, setting the \xe2\x80\xa60EeVersion of the <code>getrandom</code> function which fills <code>dest</code> with \xe2\x80\xa6DoImplement <code>next_u64</code> via <code>next_u32</code>, little-endian order.EcReads a copy of <code>Self</code> from the prefix of the given <code>source</code>.EcReads a copy of <code>Self</code> from the suffix of the given <code>source</code>.DbA <code>ByteSlice</code> which can be copied without violating \xe2\x80\xa6CiThrottle writes only against the bdi I write to, I am \xe2\x80\xa6CnUserland is not allowed to meddle with <code>cpus_mask</code>.Dl<code>set_user()</code> noticed that <code>RLIMIT_NPROC</code> was exceeded.DjA shorthand for <code>SplitByteSlice</code> and <code>ByteSliceMut</code>.CkGenerate only the basic implementations necessary to be \xe2\x80\xa60EaImplement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.EaImplement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.DkComputes the size of an object of type <code>Self</code> with the given \xe2\x80\xa6ClConditionally transmutes a mutable reference of one type \xe2\x80\xa6CmConditionally transmutes a mutable or immutable reference \xe2\x80\xa6DkProduces the split parts of <code>self</code>, using a dynamic check to \xe2\x80\xa60DbA <code>ByteSlice</code> which can be cloned without violating \xe2\x80\xa6DgThe platform-specific <code>errno</code> returned a non-positive value.Bo<code>p &lt; 0</code> or <code>p &gt; 1</code>.BiUnsafely splits <code>self</code> in two.0CnSplits the slice at the midpoint, possibly omitting bounds \xe2\x80\xa6EgAttempts to interpret the given <code>source</code> as a <code>&amp;mut Self</code> \xe2\x80\xa6E`Attempts to interpret the given <code>source</code> as a <code>&amp;Self</code>.BoThe error type of well-aligned, fallible casts.DeOn VxWorks, call to <code>randSecure</code> failed (random number \xe2\x80\xa6DhSimilar to <code>choose_mut</code>, but where the likelihood of each \xe2\x80\xa6DeReturns a mutable reference to the wrapped <code>T</code> without \xe2\x80\xa6EjImplement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, \xe2\x80\xa6DgImplement <code>fill_bytes</code> by reading chunks from the output \xe2\x80\xa60ClCoverts <code>self</code> into a <code>&amp;mut [u8]</code>.D`This contains the bitfields <code>tcpi_snd_wscale</code> and \xe2\x80\xa6DjAttempts to interpret the prefix of the given <code>source</code> as a \xe2\x80\xa6DjAttempts to interpret the suffix of the given <code>source</code> as a \xe2\x80\xa6DfAttempts to read the given <code>source</code> as a <code>Self</code>.21CfCollects values at random from the iterator into a \xe2\x80\xa6EhAttempts to read a <code>Self</code> from the prefix of the given <code>source</code>\xe2\x80\xa6EhAttempts to read a <code>Self</code> from the suffix of the given <code>source</code>\xe2\x80\xa6DcCalling Node.js function <code>crypto.randomFillSync</code> failed.DbCalling Web Crypto API <code>crypto.getRandomValues</code> failed.DfConstructs a <code>Ref</code> from the given bytes with DST length \xe2\x80\xa6CaCall to Windows <code>RtlGenRandom</code> failed.DiConstructs a <code>Ref</code> from the prefix of the given bytes with \xe2\x80\xa6DiConstructs a <code>Ref</code> from the suffix of the given bytes with \xe2\x80\xa6BiUnsafely splits <code>self</code> in two.0CeSample a single value uniformly from a range with \xe2\x80\xa6DhSimilar to <code>choose_multiple</code>, but where the likelihood of \xe2\x80\xa6Cmmaximum number of services provided on the same listening \xe2\x80\xa6EgInterprets the given <code>source</code> as a <code>&amp;mut Self</code> with a DST \xe2\x80\xa6EjInterprets the given <code>source</code> as a <code>&amp;Self</code> with a DST length \xe2\x80\xa6EjInterprets the prefix of the given <code>source</code> as a <code>&amp;mut Self</code> \xe2\x80\xa6EjInterprets the suffix of the given <code>source</code> as a <code>&amp;mut Self</code> \xe2\x80\xa6EjInterprets the prefix of the given <code>source</code> as a DST <code>&amp;Self</code> \xe2\x80\xa6EjInterprets the suffix of the given <code>source</code> as a DST <code>&amp;Self</code> \xe2\x80\xa6ElAttempts to interpret the given <code>source</code> as a <code>&amp;mut Self</code> with \xe2\x80\xa6EjAttempts to interpret the given <code>source</code> as a <code>&amp;Self</code> with a \xe2\x80\xa6DjAttempts to interpret the prefix of the given <code>source</code> as a \xe2\x80\xa6DjAttempts to interpret the suffix of the given <code>source</code> as a \xe2\x80\xa610")